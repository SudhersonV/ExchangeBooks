using IdSrv.Cosmos.Data.Services;
using System.Threading.Tasks;

namespace IdSrv.Cosmos.Data.Interfaces
{
    public interface ICosmosUserTwoFactorTokenProvider<TUser>
    {
        //
        // Summary:
        //     Returns a flag indicating whether the token provider can generate a token suitable
        //     for two factor authentication token for the specified user.
        //
        // Parameters:
        //   manager:
        //     The Microsoft.AspNetCore.Identity.UserManager`1 that can be used to retrieve
        //     user properties.
        //
        //   user:
        //     The user a token could be generated for.
        //
        // Returns:
        //     The System.Threading.Tasks.Task that represents the asynchronous operation, containing
        //     the a flag indicating if a two factor token could be generated by this provider
        //     for the specified user. The task will return true if a two factor authentication
        //     token could be generated, otherwise false.
        Task<bool> CanGenerateTwoFactorTokenAsync(CosmosUserManager<TUser> manager, TUser user);
        //
        // Summary:
        //     Generates a token for the specified user and purpose.
        //
        // Parameters:
        //   purpose:
        //     The purpose the token will be used for.
        //
        //   manager:
        //     The Microsoft.AspNetCore.Identity.UserManager`1 that can be used to retrieve
        //     user properties.
        //
        //   user:
        //     The user a token should be generated for.
        //
        // Returns:
        //     The System.Threading.Tasks.Task that represents the asynchronous operation, containing
        //     the token for the specified user and purpose.
        //
        // Remarks:
        //     The purpose parameter allows a token generator to be used for multiple types
        //     of token whilst insuring a token for one purpose cannot be used for another.
        //     For example if you specified a purpose of "Email" and validated it with the same
        //     purpose a token with the purpose of TOTP would not pass the check even if it
        //     was for the same user. Implementations of Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
        //     should validate that purpose is not null or empty to help with token separation.
        Task<string> GenerateAsync(string purpose, CosmosUserManager<TUser> manager, TUser user);
        //
        // Summary:
        //     Returns a flag indicating whether the specified token is valid for the given
        //     user and purpose.
        //
        // Parameters:
        //   purpose:
        //     The purpose the token will be used for.
        //
        //   token:
        //     The token to validate.
        //
        //   manager:
        //     The Microsoft.AspNetCore.Identity.UserManager`1 that can be used to retrieve
        //     user properties.
        //
        //   user:
        //     The user a token should be validated for.
        //
        // Returns:
        //     The System.Threading.Tasks.Task that represents the asynchronous operation, containing
        //     the a flag indicating the result of validating the tokenuser and purpose. The
        //     task will return true if the token is valid, otherwise false.
        Task<bool> ValidateAsync(string purpose, string token, CosmosUserManager<TUser> manager, TUser user);
    }
}
